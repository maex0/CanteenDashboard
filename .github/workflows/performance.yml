name: performance test

on:
  push:
    branches: [dev]

jobs:
  performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master

      - name: List Docker containers
        run: docker ps

      - name: Create .env.production file
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> ./next/.env.production
          echo API_KEY=${{ secrets.API_KEY }} >> ./next/.env.production
          echo API_URL=${{ secrets.API_URL }} >> ./next/.env.production
          echo FAVORITE_COUNT=${{ secrets.FAVORITE_COUNT }} >> ./next/.env.production

      - name: Create .env.local file
        run: |
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> ./next/.env.local
          echo API_KEY=${{ secrets.API_KEY }} >> ./next/.env.local
          echo API_URL=${{ secrets.API_URL }} >> ./next/.env.local
          echo FAVORITE_COUNT=${{ secrets.FAVORITE_COUNT }} >> ./next/.env.local

      - name: Create .env file
        run: |
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> ./.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> ./.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> ./.env

      - name: Build and start Docker services
        run: docker-compose up -d prod
      - name: List Docker containers
        run: docker ps -a

      - name: Wait for DB to be healthy
        run: |
          for i in {1..30}; do
            DB_STATUS=$(docker inspect --format '{{json .State.Health.Status}}' softwarequalitywithcats_db_1)
            echo "DB Health Status: $DB_STATUS"
            if [ "$DB_STATUS" == '"healthy"' ]; then
              break
            fi
            echo "Waiting for db service to be healthy..."
            sleep 10
          done

      - name: Wait for Prod to be healthy
        run: |
          for i in {1..30}; do
            PROD_STATUS=$(docker inspect --format '{{json .State.Health.Status}}' softwarequalitywithcats_prod_1)
            echo "Prod Health Status: $PROD_STATUS"
            if [ "$PROD_STATUS" == '"healthy"' ]; then
              break
            fi
            echo "Waiting for app service to be healthy..."
            sleep 10
          done

      - name: Confirm Service Accessibility
        run: |
          for i in {1..10}; do
            if curl -s http://prod:3000/ > /dev/null; then
              echo "Service is accessible"
              break
            fi
            echo "Waiting for service to be accessible..."
            sleep 10
          done

      - name: Change permissions
        run: sudo chmod -R 777 .
      - name: Install dependencies
        working-directory: next
        run: |
          npm config set prefix '~/.npm-global'
          npm ci

      - name: Run JMeter Tests
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: ./next/tests/performance/load-test.jmx
          outputReportsFolder: reports/
          args: '--loglevel ERROR'

      - uses: actions/upload-artifact@v1
        with:
          name: jmeter-test-results
          path: reports/

      - name: Output Service Logs for Debugging
        run: docker-compose logs prod

      #   - name: Run Lighthouse Tests
      #     working-directory: next
      #     run: npm run test:performance

      - name: Stop Docker services
        run: docker-compose down
