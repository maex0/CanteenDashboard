{
	"info": {
		"_postman_id": "cc283833-4d9c-4b01-9405-2d43e1340709",
		"name": "SoftwareQualityWithCats",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11342248"
	},
	"item": [
		{
			"name": "healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - status, uptime, message, and timestamp\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist;",
							"    pm.expect(responseData.uptime).to.exist;",
							"    pm.expect(responseData.message).to.exist;",
							"    pm.expect(responseData.timestamp).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Uptime is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.uptime).to.be.a('number');",
							"  pm.expect(responseData.uptime).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/healthcheck",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"healthcheck"
					]
				}
			},
			"response": []
		},
		{
			"name": "getrandomcatimage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, url, width, height, and createdAt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('url');",
							"    pm.expect(responseData).to.have.property('width');",
							"    pm.expect(responseData).to.have.property('height');",
							"    pm.expect(responseData).to.have.property('createdAt');",
							"});",
							"",
							"",
							"pm.test(\"URL is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.url).to.match(/^https?:\\/\\/[\\w.]+\\/\\S+$/, \"URL should be in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Width and height are non-negative integers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.width).to.be.a('number').and.to.be.at.least(0, \"Width should be a non-negative integer\");",
							"  pm.expect(responseData.height).to.be.a('number').and.to.be.at.least(0, \"Height should be a non-negative integer\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/getrandomcatimage",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"getrandomcatimage"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api",
			"type": "string"
		}
	]
}